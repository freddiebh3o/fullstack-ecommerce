generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id               String            @id @default(cuid())
  name             String
  slug             String            @unique
  planId           String?
  plan             Plan?             @relation(fields: [planId], references: [id])
  featureOverrides FeatureOverride[]
  memberships      Membership[]
  roles            Role[]
  products         Product[]
  categories       Category[]
  brands           Brand[]
  images           ProductImage[]
  auditLogs        AuditLog[]  
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model Plan {
  id        String    @id @default(cuid())
  key       String    @unique // "free" | "pro" | "enterprise"
  name      String
  features  Feature[] // base features for the plan
  tenants   Tenant[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Feature {
  id               String            @id @default(cuid())
  key              String            @unique
  name             String
  plans            Plan[]
  featureOverrides FeatureOverride[]
}

model FeatureOverride {
  id        String  @id @default(cuid())
  tenantId  String
  tenant    Tenant  @relation(fields: [tenantId], references: [id])
  featureId String
  feature   Feature @relation(fields: [featureId], references: [id])
  enabled   Boolean
}

model Membership {
  id        String   @id @default(cuid())
  tenantId  String
  userId    String
  roleId    String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  role      Role     @relation(fields: [roleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tenantId, userId]) // one membership per tenant per user
}

model Role {
  id          String                 @id @default(cuid())
  tenantId    String?                // null => system default role template
  key         String                 // free-form key (e.g. "catalog-manager")
  name        String
  builtin     Boolean                @default(true)
  description String?
  tenant      Tenant?                @relation(fields: [tenantId], references: [id])
  permissions PermissionAssignment[]
  memberships Membership[]

  @@unique([tenantId, key])
}

model Permission {
  id    String                 @id @default(cuid())
  key   String                 @unique // e.g. "product.read", "product.write", "user.manage", ...
  name  String
  roles PermissionAssignment[]
}

model PermissionAssignment {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
}

// ---- CHANGED EXISTING MODELS: add tenantId foreign keys ----

model Category {
  id        String   @id @default(cuid())
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])

  name      String
  slug      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products  Product[]

  @@unique([tenantId, slug])
}

model Brand {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])

  name        String
  slug        String
  description String?
  websiteUrl  String?
  logoUrl     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products    Product[]

  @@unique([tenantId, slug])
}

model Product {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])

  name        String
  slug        String
  description String?
  priceCents  Int
  currency    String   @default("GBP")
  stock       Int      @default(0)
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
  brandId     String?
  brand       Brand?    @relation(fields: [brandId], references: [id])
  images      ProductImage[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([tenantId, slug])
}

model ProductImage {
  id       String @id @default(cuid())
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  url       String
  alt       String?
  sortOrder Int      @default(0)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
}

enum SystemRole {
  USER
  ADMIN
  SUPERADMIN
}

model User {
  id           String       @id @default(cuid())
  email        String       @unique
  name         String?
  passwordHash String
  role         SystemRole   @default(USER) // system role (legacy; still used to gate /admin)
  memberships  Membership[]
  auditLogs    AuditLog[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model AuditLog {
  id        String   @id @default(cuid())
  tenantId  String
  userId    String
  action    String
  meta      Json?
  createdAt DateTime @default(now())

  tenant Tenant @relation(fields: [tenantId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}